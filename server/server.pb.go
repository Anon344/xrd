// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package server

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NewRoundRequest struct {
	Round                uint64   `protobuf:"fixed64,1,opt,name=round,proto3" json:"round,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewRoundRequest) Reset()         { *m = NewRoundRequest{} }
func (m *NewRoundRequest) String() string { return proto.CompactTextString(m) }
func (*NewRoundRequest) ProtoMessage()    {}
func (*NewRoundRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{0}
}

func (m *NewRoundRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewRoundRequest.Unmarshal(m, b)
}
func (m *NewRoundRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewRoundRequest.Marshal(b, m, deterministic)
}
func (m *NewRoundRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewRoundRequest.Merge(m, src)
}
func (m *NewRoundRequest) XXX_Size() int {
	return xxx_messageInfo_NewRoundRequest.Size(m)
}
func (m *NewRoundRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewRoundRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewRoundRequest proto.InternalMessageInfo

func (m *NewRoundRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

type NewRoundResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewRoundResponse) Reset()         { *m = NewRoundResponse{} }
func (m *NewRoundResponse) String() string { return proto.CompactTextString(m) }
func (*NewRoundResponse) ProtoMessage()    {}
func (*NewRoundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{1}
}

func (m *NewRoundResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewRoundResponse.Unmarshal(m, b)
}
func (m *NewRoundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewRoundResponse.Marshal(b, m, deterministic)
}
func (m *NewRoundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewRoundResponse.Merge(m, src)
}
func (m *NewRoundResponse) XXX_Size() int {
	return xxx_messageInfo_NewRoundResponse.Size(m)
}
func (m *NewRoundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewRoundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewRoundResponse proto.InternalMessageInfo

type EndRoundRequest struct {
	Round                uint64   `protobuf:"fixed64,1,opt,name=round,proto3" json:"round,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndRoundRequest) Reset()         { *m = EndRoundRequest{} }
func (m *EndRoundRequest) String() string { return proto.CompactTextString(m) }
func (*EndRoundRequest) ProtoMessage()    {}
func (*EndRoundRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{2}
}

func (m *EndRoundRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndRoundRequest.Unmarshal(m, b)
}
func (m *EndRoundRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndRoundRequest.Marshal(b, m, deterministic)
}
func (m *EndRoundRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndRoundRequest.Merge(m, src)
}
func (m *EndRoundRequest) XXX_Size() int {
	return xxx_messageInfo_EndRoundRequest.Size(m)
}
func (m *EndRoundRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EndRoundRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EndRoundRequest proto.InternalMessageInfo

func (m *EndRoundRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

type EndRoundResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EndRoundResponse) Reset()         { *m = EndRoundResponse{} }
func (m *EndRoundResponse) String() string { return proto.CompactTextString(m) }
func (*EndRoundResponse) ProtoMessage()    {}
func (*EndRoundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{3}
}

func (m *EndRoundResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EndRoundResponse.Unmarshal(m, b)
}
func (m *EndRoundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EndRoundResponse.Marshal(b, m, deterministic)
}
func (m *EndRoundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndRoundResponse.Merge(m, src)
}
func (m *EndRoundResponse) XXX_Size() int {
	return xxx_messageInfo_EndRoundResponse.Size(m)
}
func (m *EndRoundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EndRoundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EndRoundResponse proto.InternalMessageInfo

type StartRoundRequest struct {
	Round                uint64   `protobuf:"fixed64,1,opt,name=round,proto3" json:"round,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartRoundRequest) Reset()         { *m = StartRoundRequest{} }
func (m *StartRoundRequest) String() string { return proto.CompactTextString(m) }
func (*StartRoundRequest) ProtoMessage()    {}
func (*StartRoundRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{4}
}

func (m *StartRoundRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartRoundRequest.Unmarshal(m, b)
}
func (m *StartRoundRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartRoundRequest.Marshal(b, m, deterministic)
}
func (m *StartRoundRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartRoundRequest.Merge(m, src)
}
func (m *StartRoundRequest) XXX_Size() int {
	return xxx_messageInfo_StartRoundRequest.Size(m)
}
func (m *StartRoundRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartRoundRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartRoundRequest proto.InternalMessageInfo

func (m *StartRoundRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

type StartRoundResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartRoundResponse) Reset()         { *m = StartRoundResponse{} }
func (m *StartRoundResponse) String() string { return proto.CompactTextString(m) }
func (*StartRoundResponse) ProtoMessage()    {}
func (*StartRoundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{5}
}

func (m *StartRoundResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartRoundResponse.Unmarshal(m, b)
}
func (m *StartRoundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartRoundResponse.Marshal(b, m, deterministic)
}
func (m *StartRoundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartRoundResponse.Merge(m, src)
}
func (m *StartRoundResponse) XXX_Size() int {
	return xxx_messageInfo_StartRoundResponse.Size(m)
}
func (m *StartRoundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartRoundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartRoundResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*NewRoundRequest)(nil), "server.NewRoundRequest")
	proto.RegisterType((*NewRoundResponse)(nil), "server.NewRoundResponse")
	proto.RegisterType((*EndRoundRequest)(nil), "server.EndRoundRequest")
	proto.RegisterType((*EndRoundResponse)(nil), "server.EndRoundResponse")
	proto.RegisterType((*StartRoundRequest)(nil), "server.StartRoundRequest")
	proto.RegisterType((*StartRoundResponse)(nil), "server.StartRoundResponse")
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_ad098daeda4239f7) }

var fileDescriptor_ad098daeda4239f7 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xd4, 0xb9, 0xf8,
	0xfd, 0x52, 0xcb, 0x83, 0xf2, 0x4b, 0xf3, 0x52, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84,
	0x44, 0xb8, 0x58, 0x8b, 0x40, 0x7c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xb6, 0x20, 0x08, 0x47, 0x49,
	0x88, 0x4b, 0x00, 0xa1, 0xb0, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x15, 0xa4, 0xd9, 0x35, 0x2f, 0x85,
	0x38, 0xcd, 0x08, 0x85, 0x50, 0xcd, 0x9a, 0x5c, 0x82, 0xc1, 0x25, 0x89, 0x45, 0x25, 0x44, 0x68,
	0x17, 0xe1, 0x12, 0x42, 0x56, 0x0a, 0x31, 0xc0, 0xe8, 0x1c, 0x23, 0x17, 0x73, 0x44, 0x90, 0x8b,
	0x90, 0x3d, 0x17, 0x07, 0xcc, 0x65, 0x42, 0xe2, 0x7a, 0x50, 0x5f, 0xa2, 0x79, 0x4a, 0x4a, 0x02,
	0x53, 0x02, 0xea, 0x0e, 0x06, 0x90, 0x01, 0x30, 0xd7, 0x21, 0x0c, 0x40, 0xf3, 0x18, 0xc2, 0x00,
	0x0c, 0x8f, 0x30, 0x08, 0xb9, 0x72, 0x71, 0x21, 0xdc, 0x27, 0x24, 0x09, 0x53, 0x89, 0xe1, 0x3d,
	0x29, 0x29, 0x6c, 0x52, 0x30, 0x63, 0x92, 0xd8, 0xc0, 0x51, 0x63, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x1c, 0x2e, 0xa1, 0xe4, 0xaa, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// XRDClient is the client API for XRD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type XRDClient interface {
	NewRound(ctx context.Context, in *NewRoundRequest, opts ...grpc.CallOption) (*NewRoundResponse, error)
	EndRound(ctx context.Context, in *EndRoundRequest, opts ...grpc.CallOption) (*EndRoundResponse, error)
	StartRound(ctx context.Context, in *StartRoundRequest, opts ...grpc.CallOption) (*StartRoundResponse, error)
}

type xRDClient struct {
	cc *grpc.ClientConn
}

func NewXRDClient(cc *grpc.ClientConn) XRDClient {
	return &xRDClient{cc}
}

func (c *xRDClient) NewRound(ctx context.Context, in *NewRoundRequest, opts ...grpc.CallOption) (*NewRoundResponse, error) {
	out := new(NewRoundResponse)
	err := c.cc.Invoke(ctx, "/server.XRD/NewRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRDClient) EndRound(ctx context.Context, in *EndRoundRequest, opts ...grpc.CallOption) (*EndRoundResponse, error) {
	out := new(EndRoundResponse)
	err := c.cc.Invoke(ctx, "/server.XRD/EndRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xRDClient) StartRound(ctx context.Context, in *StartRoundRequest, opts ...grpc.CallOption) (*StartRoundResponse, error) {
	out := new(StartRoundResponse)
	err := c.cc.Invoke(ctx, "/server.XRD/StartRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XRDServer is the server API for XRD service.
type XRDServer interface {
	NewRound(context.Context, *NewRoundRequest) (*NewRoundResponse, error)
	EndRound(context.Context, *EndRoundRequest) (*EndRoundResponse, error)
	StartRound(context.Context, *StartRoundRequest) (*StartRoundResponse, error)
}

// UnimplementedXRDServer can be embedded to have forward compatible implementations.
type UnimplementedXRDServer struct {
}

func (*UnimplementedXRDServer) NewRound(ctx context.Context, req *NewRoundRequest) (*NewRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewRound not implemented")
}
func (*UnimplementedXRDServer) EndRound(ctx context.Context, req *EndRoundRequest) (*EndRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndRound not implemented")
}
func (*UnimplementedXRDServer) StartRound(ctx context.Context, req *StartRoundRequest) (*StartRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRound not implemented")
}

func RegisterXRDServer(s *grpc.Server, srv XRDServer) {
	s.RegisterService(&_XRD_serviceDesc, srv)
}

func _XRD_NewRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRDServer).NewRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.XRD/NewRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRDServer).NewRound(ctx, req.(*NewRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRD_EndRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRDServer).EndRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.XRD/EndRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRDServer).EndRound(ctx, req.(*EndRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XRD_StartRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XRDServer).StartRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.XRD/StartRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XRDServer).StartRound(ctx, req.(*StartRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _XRD_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.XRD",
	HandlerType: (*XRDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewRound",
			Handler:    _XRD_NewRound_Handler,
		},
		{
			MethodName: "EndRound",
			Handler:    _XRD_EndRound_Handler,
		},
		{
			MethodName: "StartRound",
			Handler:    _XRD_StartRound_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
