// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client.proto

/*
Package client is a generated protocol buffer package.

It is generated from these files:
	client.proto

It has these top-level messages:
	RegisterUsersRequest
	RegisterUsersResponse
	GenerateMessagesRequest
	GenerateMessagesResponse
	SubmitMessagesRequest
	SubmitMessagesResponse
	DownloadMessagesRequest
	DownloadMessagesResponse
*/
package client

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterUsersRequest struct {
	Round    uint64 `protobuf:"fixed64,1,opt,name=round,proto3" json:"round,omitempty"`
	NumUsers uint64 `protobuf:"fixed64,2,opt,name=num_users,json=numUsers,proto3" json:"num_users,omitempty"`
}

func (m *RegisterUsersRequest) Reset()                    { *m = RegisterUsersRequest{} }
func (m *RegisterUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterUsersRequest) ProtoMessage()               {}
func (*RegisterUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptorClient, []int{0} }

func (m *RegisterUsersRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *RegisterUsersRequest) GetNumUsers() uint64 {
	if m != nil {
		return m.NumUsers
	}
	return 0
}

type RegisterUsersResponse struct {
}

func (m *RegisterUsersResponse) Reset()                    { *m = RegisterUsersResponse{} }
func (m *RegisterUsersResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterUsersResponse) ProtoMessage()               {}
func (*RegisterUsersResponse) Descriptor() ([]byte, []int) { return fileDescriptorClient, []int{1} }

type GenerateMessagesRequest struct {
	Round   uint64 `protobuf:"fixed64,1,opt,name=round,proto3" json:"round,omitempty"`
	MsgSize uint64 `protobuf:"fixed64,2,opt,name=msg_size,json=msgSize,proto3" json:"msg_size,omitempty"`
}

func (m *GenerateMessagesRequest) Reset()                    { *m = GenerateMessagesRequest{} }
func (m *GenerateMessagesRequest) String() string            { return proto.CompactTextString(m) }
func (*GenerateMessagesRequest) ProtoMessage()               {}
func (*GenerateMessagesRequest) Descriptor() ([]byte, []int) { return fileDescriptorClient, []int{2} }

func (m *GenerateMessagesRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *GenerateMessagesRequest) GetMsgSize() uint64 {
	if m != nil {
		return m.MsgSize
	}
	return 0
}

type GenerateMessagesResponse struct {
}

func (m *GenerateMessagesResponse) Reset()                    { *m = GenerateMessagesResponse{} }
func (m *GenerateMessagesResponse) String() string            { return proto.CompactTextString(m) }
func (*GenerateMessagesResponse) ProtoMessage()               {}
func (*GenerateMessagesResponse) Descriptor() ([]byte, []int) { return fileDescriptorClient, []int{3} }

type SubmitMessagesRequest struct {
	Round uint64 `protobuf:"fixed64,1,opt,name=round,proto3" json:"round,omitempty"`
}

func (m *SubmitMessagesRequest) Reset()                    { *m = SubmitMessagesRequest{} }
func (m *SubmitMessagesRequest) String() string            { return proto.CompactTextString(m) }
func (*SubmitMessagesRequest) ProtoMessage()               {}
func (*SubmitMessagesRequest) Descriptor() ([]byte, []int) { return fileDescriptorClient, []int{4} }

func (m *SubmitMessagesRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

type SubmitMessagesResponse struct {
}

func (m *SubmitMessagesResponse) Reset()                    { *m = SubmitMessagesResponse{} }
func (m *SubmitMessagesResponse) String() string            { return proto.CompactTextString(m) }
func (*SubmitMessagesResponse) ProtoMessage()               {}
func (*SubmitMessagesResponse) Descriptor() ([]byte, []int) { return fileDescriptorClient, []int{5} }

type DownloadMessagesRequest struct {
	Round uint64 `protobuf:"fixed64,1,opt,name=round,proto3" json:"round,omitempty"`
}

func (m *DownloadMessagesRequest) Reset()                    { *m = DownloadMessagesRequest{} }
func (m *DownloadMessagesRequest) String() string            { return proto.CompactTextString(m) }
func (*DownloadMessagesRequest) ProtoMessage()               {}
func (*DownloadMessagesRequest) Descriptor() ([]byte, []int) { return fileDescriptorClient, []int{6} }

func (m *DownloadMessagesRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

type DownloadMessagesResponse struct {
}

func (m *DownloadMessagesResponse) Reset()                    { *m = DownloadMessagesResponse{} }
func (m *DownloadMessagesResponse) String() string            { return proto.CompactTextString(m) }
func (*DownloadMessagesResponse) ProtoMessage()               {}
func (*DownloadMessagesResponse) Descriptor() ([]byte, []int) { return fileDescriptorClient, []int{7} }

func init() {
	proto.RegisterType((*RegisterUsersRequest)(nil), "client.RegisterUsersRequest")
	proto.RegisterType((*RegisterUsersResponse)(nil), "client.RegisterUsersResponse")
	proto.RegisterType((*GenerateMessagesRequest)(nil), "client.GenerateMessagesRequest")
	proto.RegisterType((*GenerateMessagesResponse)(nil), "client.GenerateMessagesResponse")
	proto.RegisterType((*SubmitMessagesRequest)(nil), "client.SubmitMessagesRequest")
	proto.RegisterType((*SubmitMessagesResponse)(nil), "client.SubmitMessagesResponse")
	proto.RegisterType((*DownloadMessagesRequest)(nil), "client.DownloadMessagesRequest")
	proto.RegisterType((*DownloadMessagesResponse)(nil), "client.DownloadMessagesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Client service

type ClientClient interface {
	RegisterUsers(ctx context.Context, in *RegisterUsersRequest, opts ...grpc.CallOption) (*RegisterUsersResponse, error)
	GenerateMessages(ctx context.Context, in *GenerateMessagesRequest, opts ...grpc.CallOption) (*GenerateMessagesResponse, error)
	SubmitMessages(ctx context.Context, in *SubmitMessagesRequest, opts ...grpc.CallOption) (*SubmitMessagesResponse, error)
	DownloadMessages(ctx context.Context, in *DownloadMessagesRequest, opts ...grpc.CallOption) (*DownloadMessagesResponse, error)
}

type clientClient struct {
	cc *grpc.ClientConn
}

func NewClientClient(cc *grpc.ClientConn) ClientClient {
	return &clientClient{cc}
}

func (c *clientClient) RegisterUsers(ctx context.Context, in *RegisterUsersRequest, opts ...grpc.CallOption) (*RegisterUsersResponse, error) {
	out := new(RegisterUsersResponse)
	err := grpc.Invoke(ctx, "/client.Client/RegisterUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) GenerateMessages(ctx context.Context, in *GenerateMessagesRequest, opts ...grpc.CallOption) (*GenerateMessagesResponse, error) {
	out := new(GenerateMessagesResponse)
	err := grpc.Invoke(ctx, "/client.Client/GenerateMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) SubmitMessages(ctx context.Context, in *SubmitMessagesRequest, opts ...grpc.CallOption) (*SubmitMessagesResponse, error) {
	out := new(SubmitMessagesResponse)
	err := grpc.Invoke(ctx, "/client.Client/SubmitMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientClient) DownloadMessages(ctx context.Context, in *DownloadMessagesRequest, opts ...grpc.CallOption) (*DownloadMessagesResponse, error) {
	out := new(DownloadMessagesResponse)
	err := grpc.Invoke(ctx, "/client.Client/DownloadMessages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Client service

type ClientServer interface {
	RegisterUsers(context.Context, *RegisterUsersRequest) (*RegisterUsersResponse, error)
	GenerateMessages(context.Context, *GenerateMessagesRequest) (*GenerateMessagesResponse, error)
	SubmitMessages(context.Context, *SubmitMessagesRequest) (*SubmitMessagesResponse, error)
	DownloadMessages(context.Context, *DownloadMessagesRequest) (*DownloadMessagesResponse, error)
}

func RegisterClientServer(s *grpc.Server, srv ClientServer) {
	s.RegisterService(&_Client_serviceDesc, srv)
}

func _Client_RegisterUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).RegisterUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Client/RegisterUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).RegisterUsers(ctx, req.(*RegisterUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_GenerateMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).GenerateMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Client/GenerateMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).GenerateMessages(ctx, req.(*GenerateMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_SubmitMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).SubmitMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Client/SubmitMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).SubmitMessages(ctx, req.(*SubmitMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_DownloadMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServer).DownloadMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Client/DownloadMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServer).DownloadMessages(ctx, req.(*DownloadMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Client_serviceDesc = grpc.ServiceDesc{
	ServiceName: "client.Client",
	HandlerType: (*ClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUsers",
			Handler:    _Client_RegisterUsers_Handler,
		},
		{
			MethodName: "GenerateMessages",
			Handler:    _Client_GenerateMessages_Handler,
		},
		{
			MethodName: "SubmitMessages",
			Handler:    _Client_SubmitMessages_Handler,
		},
		{
			MethodName: "DownloadMessages",
			Handler:    _Client_DownloadMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client.proto",
}

func (m *RegisterUsersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterUsersRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Round != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Round))
		i += 8
	}
	if m.NumUsers != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.NumUsers))
		i += 8
	}
	return i, nil
}

func (m *RegisterUsersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterUsersResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GenerateMessagesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateMessagesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Round != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Round))
		i += 8
	}
	if m.MsgSize != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.MsgSize))
		i += 8
	}
	return i, nil
}

func (m *GenerateMessagesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateMessagesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SubmitMessagesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitMessagesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Round != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Round))
		i += 8
	}
	return i, nil
}

func (m *SubmitMessagesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitMessagesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DownloadMessagesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadMessagesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Round != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Round))
		i += 8
	}
	return i, nil
}

func (m *DownloadMessagesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownloadMessagesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintClient(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RegisterUsersRequest) Size() (n int) {
	var l int
	_ = l
	if m.Round != 0 {
		n += 9
	}
	if m.NumUsers != 0 {
		n += 9
	}
	return n
}

func (m *RegisterUsersResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GenerateMessagesRequest) Size() (n int) {
	var l int
	_ = l
	if m.Round != 0 {
		n += 9
	}
	if m.MsgSize != 0 {
		n += 9
	}
	return n
}

func (m *GenerateMessagesResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SubmitMessagesRequest) Size() (n int) {
	var l int
	_ = l
	if m.Round != 0 {
		n += 9
	}
	return n
}

func (m *SubmitMessagesResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DownloadMessagesRequest) Size() (n int) {
	var l int
	_ = l
	if m.Round != 0 {
		n += 9
	}
	return n
}

func (m *DownloadMessagesResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovClient(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozClient(x uint64) (n int) {
	return sovClient(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterUsersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterUsersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterUsersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Round = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumUsers", wireType)
			}
			m.NumUsers = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.NumUsers = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterUsersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterUsersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterUsersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateMessagesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateMessagesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateMessagesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Round = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSize", wireType)
			}
			m.MsgSize = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgSize = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateMessagesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateMessagesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateMessagesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitMessagesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitMessagesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitMessagesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Round = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitMessagesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitMessagesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitMessagesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadMessagesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadMessagesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadMessagesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Round = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownloadMessagesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownloadMessagesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownloadMessagesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClient(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClient
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthClient
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowClient
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipClient(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthClient = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClient   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("client.proto", fileDescriptorClient) }

var fileDescriptorClient = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x5d, 0x4a, 0xc3, 0x40,
	0x10, 0xc7, 0x9b, 0x82, 0xb1, 0x0e, 0x2a, 0x65, 0x69, 0x4d, 0x8c, 0x1a, 0xcb, 0x3e, 0xf9, 0x62,
	0x05, 0xbd, 0x81, 0x0a, 0xa2, 0xa0, 0x60, 0x8a, 0xf8, 0x58, 0x52, 0x3b, 0x84, 0x40, 0xb3, 0x5b,
	0x33, 0xbb, 0x08, 0x3d, 0x89, 0x47, 0xf2, 0xd1, 0x0b, 0x08, 0x12, 0x2f, 0x22, 0x26, 0xb1, 0xb5,
	0x69, 0x17, 0xfb, 0xb8, 0xcc, 0xfc, 0x3f, 0xf8, 0xcd, 0xc2, 0xe6, 0xd3, 0x28, 0x46, 0xa1, 0xba,
	0xe3, 0x54, 0x2a, 0xc9, 0xec, 0xe2, 0xc5, 0xaf, 0xa1, 0x15, 0x60, 0x14, 0x93, 0xc2, 0xf4, 0x81,
	0x30, 0xa5, 0x00, 0x9f, 0x35, 0x92, 0x62, 0x2d, 0x58, 0x4b, 0xa5, 0x16, 0x43, 0xd7, 0xea, 0x58,
	0x47, 0x76, 0x50, 0x3c, 0xd8, 0x1e, 0x6c, 0x08, 0x9d, 0xf4, 0xf5, 0xcf, 0xa6, 0x5b, 0xcf, 0x27,
	0x0d, 0xa1, 0x93, 0x5c, 0xc9, 0x1d, 0x68, 0x57, 0xac, 0x68, 0x2c, 0x05, 0x21, 0xbf, 0x01, 0xe7,
	0x0a, 0x05, 0xa6, 0xa1, 0xc2, 0x5b, 0x24, 0x0a, 0x23, 0xfc, 0x27, 0x66, 0x17, 0x1a, 0x09, 0x45,
	0x7d, 0x8a, 0x27, 0x58, 0xa6, 0xac, 0x27, 0x14, 0xf5, 0xe2, 0x09, 0x72, 0x0f, 0xdc, 0x45, 0xaf,
	0x32, 0xe7, 0x18, 0xda, 0x3d, 0x3d, 0x48, 0x62, 0xb5, 0x52, 0x0a, 0x77, 0x61, 0xa7, 0xba, 0x5e,
	0x1a, 0x9d, 0x80, 0x73, 0x29, 0x5f, 0xc4, 0x48, 0x86, 0xc3, 0xd5, 0xac, 0x3c, 0x70, 0x17, 0x05,
	0x85, 0xd9, 0xe9, 0x47, 0x1d, 0xec, 0x8b, 0x1c, 0x36, 0xbb, 0x83, 0xad, 0x39, 0x42, 0x6c, 0xbf,
	0x5b, 0x1e, 0x65, 0xd9, 0x0d, 0xbc, 0x03, 0xc3, 0xb4, 0x6c, 0x59, 0x63, 0x8f, 0xd0, 0xac, 0xc2,
	0x60, 0x87, 0xbf, 0x22, 0x03, 0x72, 0xaf, 0x63, 0x5e, 0x98, 0x1a, 0xdf, 0xc3, 0xf6, 0x3c, 0x1a,
	0x36, 0xed, 0xb2, 0x94, 0xb0, 0xe7, 0x9b, 0xc6, 0x7f, 0xbb, 0x56, 0x11, 0xcd, 0xba, 0x1a, 0x68,
	0xcf, 0xba, 0x9a, 0xe8, 0xf2, 0xda, 0x79, 0xf3, 0x2d, 0xf3, 0xad, 0xf7, 0xcc, 0xb7, 0x3e, 0x33,
	0xdf, 0x7a, 0xfd, 0xf2, 0x6b, 0x03, 0x3b, 0xff, 0xe2, 0x67, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xdc, 0x57, 0xe7, 0x7f, 0xf2, 0x02, 0x00, 0x00,
}
