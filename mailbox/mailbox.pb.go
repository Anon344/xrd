// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mailbox.proto

/*
	Package mailbox is a generated protocol buffer package.

	It is generated from these files:
		mailbox.proto

	It has these top-level messages:
		NewRoundRequest
		NewRoundResponse
		EndRoundRequest
		EndRoundResponse
		RegisterUsersRequest
		RegisterUsersResponse
		RegisteredUsersRequest
		RegisteredUsersResponse
		Inbox
		Mail
		DeliverMailsRequest
		DeliverMailsResponse
		GetMailsRequest
		GetMailsResponse
*/
package mailbox

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NewRoundRequest struct {
	Round uint64 `protobuf:"fixed64,1,opt,name=round,proto3" json:"round,omitempty"`
}

func (m *NewRoundRequest) Reset()                    { *m = NewRoundRequest{} }
func (m *NewRoundRequest) String() string            { return proto.CompactTextString(m) }
func (*NewRoundRequest) ProtoMessage()               {}
func (*NewRoundRequest) Descriptor() ([]byte, []int) { return fileDescriptorMailbox, []int{0} }

func (m *NewRoundRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

type NewRoundResponse struct {
}

func (m *NewRoundResponse) Reset()                    { *m = NewRoundResponse{} }
func (m *NewRoundResponse) String() string            { return proto.CompactTextString(m) }
func (*NewRoundResponse) ProtoMessage()               {}
func (*NewRoundResponse) Descriptor() ([]byte, []int) { return fileDescriptorMailbox, []int{1} }

type EndRoundRequest struct {
	Round uint64 `protobuf:"fixed64,1,opt,name=round,proto3" json:"round,omitempty"`
}

func (m *EndRoundRequest) Reset()                    { *m = EndRoundRequest{} }
func (m *EndRoundRequest) String() string            { return proto.CompactTextString(m) }
func (*EndRoundRequest) ProtoMessage()               {}
func (*EndRoundRequest) Descriptor() ([]byte, []int) { return fileDescriptorMailbox, []int{2} }

func (m *EndRoundRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

type EndRoundResponse struct {
}

func (m *EndRoundResponse) Reset()                    { *m = EndRoundResponse{} }
func (m *EndRoundResponse) String() string            { return proto.CompactTextString(m) }
func (*EndRoundResponse) ProtoMessage()               {}
func (*EndRoundResponse) Descriptor() ([]byte, []int) { return fileDescriptorMailbox, []int{3} }

type RegisterUsersRequest struct {
	Round    uint64   `protobuf:"fixed64,1,opt,name=round,proto3" json:"round,omitempty"`
	UserKeys [][]byte `protobuf:"bytes,2,rep,name=user_keys,json=userKeys" json:"user_keys,omitempty"`
	Expected []uint64 `protobuf:"fixed64,3,rep,packed,name=expected" json:"expected,omitempty"`
}

func (m *RegisterUsersRequest) Reset()                    { *m = RegisterUsersRequest{} }
func (m *RegisterUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterUsersRequest) ProtoMessage()               {}
func (*RegisterUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptorMailbox, []int{4} }

func (m *RegisterUsersRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *RegisterUsersRequest) GetUserKeys() [][]byte {
	if m != nil {
		return m.UserKeys
	}
	return nil
}

func (m *RegisterUsersRequest) GetExpected() []uint64 {
	if m != nil {
		return m.Expected
	}
	return nil
}

type RegisterUsersResponse struct {
}

func (m *RegisterUsersResponse) Reset()                    { *m = RegisterUsersResponse{} }
func (m *RegisterUsersResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterUsersResponse) ProtoMessage()               {}
func (*RegisterUsersResponse) Descriptor() ([]byte, []int) { return fileDescriptorMailbox, []int{5} }

type RegisteredUsersRequest struct {
	Round uint64 `protobuf:"fixed64,1,opt,name=round,proto3" json:"round,omitempty"`
}

func (m *RegisteredUsersRequest) Reset()                    { *m = RegisteredUsersRequest{} }
func (m *RegisteredUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisteredUsersRequest) ProtoMessage()               {}
func (*RegisteredUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptorMailbox, []int{6} }

func (m *RegisteredUsersRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

type RegisteredUsersResponse struct {
	UserKeys [][]byte `protobuf:"bytes,1,rep,name=user_keys,json=userKeys" json:"user_keys,omitempty"`
}

func (m *RegisteredUsersResponse) Reset()                    { *m = RegisteredUsersResponse{} }
func (m *RegisteredUsersResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisteredUsersResponse) ProtoMessage()               {}
func (*RegisteredUsersResponse) Descriptor() ([]byte, []int) { return fileDescriptorMailbox, []int{7} }

func (m *RegisteredUsersResponse) GetUserKeys() [][]byte {
	if m != nil {
		return m.UserKeys
	}
	return nil
}

type Inbox struct {
	UserKey  []byte   `protobuf:"bytes,1,opt,name=user_key,json=userKey,proto3" json:"user_key,omitempty"`
	Messages [][]byte `protobuf:"bytes,2,rep,name=messages" json:"messages,omitempty"`
}

func (m *Inbox) Reset()                    { *m = Inbox{} }
func (m *Inbox) String() string            { return proto.CompactTextString(m) }
func (*Inbox) ProtoMessage()               {}
func (*Inbox) Descriptor() ([]byte, []int) { return fileDescriptorMailbox, []int{8} }

func (m *Inbox) GetUserKey() []byte {
	if m != nil {
		return m.UserKey
	}
	return nil
}

func (m *Inbox) GetMessages() [][]byte {
	if m != nil {
		return m.Messages
	}
	return nil
}

type Mail struct {
	UserKey []byte `protobuf:"bytes,1,opt,name=user_key,json=userKey,proto3" json:"user_key,omitempty"`
	Message []byte `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Mail) Reset()                    { *m = Mail{} }
func (m *Mail) String() string            { return proto.CompactTextString(m) }
func (*Mail) ProtoMessage()               {}
func (*Mail) Descriptor() ([]byte, []int) { return fileDescriptorMailbox, []int{9} }

func (m *Mail) GetUserKey() []byte {
	if m != nil {
		return m.UserKey
	}
	return nil
}

func (m *Mail) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type DeliverMailsRequest struct {
	Round uint64  `protobuf:"fixed64,1,opt,name=round,proto3" json:"round,omitempty"`
	Mails []*Mail `protobuf:"bytes,2,rep,name=mails" json:"mails,omitempty"`
}

func (m *DeliverMailsRequest) Reset()                    { *m = DeliverMailsRequest{} }
func (m *DeliverMailsRequest) String() string            { return proto.CompactTextString(m) }
func (*DeliverMailsRequest) ProtoMessage()               {}
func (*DeliverMailsRequest) Descriptor() ([]byte, []int) { return fileDescriptorMailbox, []int{10} }

func (m *DeliverMailsRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *DeliverMailsRequest) GetMails() []*Mail {
	if m != nil {
		return m.Mails
	}
	return nil
}

type DeliverMailsResponse struct {
}

func (m *DeliverMailsResponse) Reset()                    { *m = DeliverMailsResponse{} }
func (m *DeliverMailsResponse) String() string            { return proto.CompactTextString(m) }
func (*DeliverMailsResponse) ProtoMessage()               {}
func (*DeliverMailsResponse) Descriptor() ([]byte, []int) { return fileDescriptorMailbox, []int{11} }

type GetMailsRequest struct {
	Round    uint64   `protobuf:"fixed64,1,opt,name=round,proto3" json:"round,omitempty"`
	UserKeys [][]byte `protobuf:"bytes,2,rep,name=user_keys,json=userKeys" json:"user_keys,omitempty"`
}

func (m *GetMailsRequest) Reset()                    { *m = GetMailsRequest{} }
func (m *GetMailsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMailsRequest) ProtoMessage()               {}
func (*GetMailsRequest) Descriptor() ([]byte, []int) { return fileDescriptorMailbox, []int{12} }

func (m *GetMailsRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *GetMailsRequest) GetUserKeys() [][]byte {
	if m != nil {
		return m.UserKeys
	}
	return nil
}

type GetMailsResponse struct {
	Inboxes []*Inbox `protobuf:"bytes,1,rep,name=inboxes" json:"inboxes,omitempty"`
}

func (m *GetMailsResponse) Reset()                    { *m = GetMailsResponse{} }
func (m *GetMailsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMailsResponse) ProtoMessage()               {}
func (*GetMailsResponse) Descriptor() ([]byte, []int) { return fileDescriptorMailbox, []int{13} }

func (m *GetMailsResponse) GetInboxes() []*Inbox {
	if m != nil {
		return m.Inboxes
	}
	return nil
}

func init() {
	proto.RegisterType((*NewRoundRequest)(nil), "mailbox.NewRoundRequest")
	proto.RegisterType((*NewRoundResponse)(nil), "mailbox.NewRoundResponse")
	proto.RegisterType((*EndRoundRequest)(nil), "mailbox.EndRoundRequest")
	proto.RegisterType((*EndRoundResponse)(nil), "mailbox.EndRoundResponse")
	proto.RegisterType((*RegisterUsersRequest)(nil), "mailbox.RegisterUsersRequest")
	proto.RegisterType((*RegisterUsersResponse)(nil), "mailbox.RegisterUsersResponse")
	proto.RegisterType((*RegisteredUsersRequest)(nil), "mailbox.RegisteredUsersRequest")
	proto.RegisterType((*RegisteredUsersResponse)(nil), "mailbox.RegisteredUsersResponse")
	proto.RegisterType((*Inbox)(nil), "mailbox.Inbox")
	proto.RegisterType((*Mail)(nil), "mailbox.Mail")
	proto.RegisterType((*DeliverMailsRequest)(nil), "mailbox.DeliverMailsRequest")
	proto.RegisterType((*DeliverMailsResponse)(nil), "mailbox.DeliverMailsResponse")
	proto.RegisterType((*GetMailsRequest)(nil), "mailbox.GetMailsRequest")
	proto.RegisterType((*GetMailsResponse)(nil), "mailbox.GetMailsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Mailbox service

type MailboxClient interface {
	NewRound(ctx context.Context, in *NewRoundRequest, opts ...grpc.CallOption) (*NewRoundResponse, error)
	EndRound(ctx context.Context, in *EndRoundRequest, opts ...grpc.CallOption) (*EndRoundResponse, error)
	RegisterUsers(ctx context.Context, opts ...grpc.CallOption) (Mailbox_RegisterUsersClient, error)
	RegisteredUsers(ctx context.Context, in *RegisteredUsersRequest, opts ...grpc.CallOption) (Mailbox_RegisteredUsersClient, error)
	DeliverMails(ctx context.Context, opts ...grpc.CallOption) (Mailbox_DeliverMailsClient, error)
	GetMails(ctx context.Context, opts ...grpc.CallOption) (Mailbox_GetMailsClient, error)
}

type mailboxClient struct {
	cc *grpc.ClientConn
}

func NewMailboxClient(cc *grpc.ClientConn) MailboxClient {
	return &mailboxClient{cc}
}

func (c *mailboxClient) NewRound(ctx context.Context, in *NewRoundRequest, opts ...grpc.CallOption) (*NewRoundResponse, error) {
	out := new(NewRoundResponse)
	err := grpc.Invoke(ctx, "/mailbox.Mailbox/NewRound", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailboxClient) EndRound(ctx context.Context, in *EndRoundRequest, opts ...grpc.CallOption) (*EndRoundResponse, error) {
	out := new(EndRoundResponse)
	err := grpc.Invoke(ctx, "/mailbox.Mailbox/EndRound", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailboxClient) RegisterUsers(ctx context.Context, opts ...grpc.CallOption) (Mailbox_RegisterUsersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Mailbox_serviceDesc.Streams[0], c.cc, "/mailbox.Mailbox/RegisterUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &mailboxRegisterUsersClient{stream}
	return x, nil
}

type Mailbox_RegisterUsersClient interface {
	Send(*RegisterUsersRequest) error
	CloseAndRecv() (*RegisterUsersResponse, error)
	grpc.ClientStream
}

type mailboxRegisterUsersClient struct {
	grpc.ClientStream
}

func (x *mailboxRegisterUsersClient) Send(m *RegisterUsersRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mailboxRegisterUsersClient) CloseAndRecv() (*RegisterUsersResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RegisterUsersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mailboxClient) RegisteredUsers(ctx context.Context, in *RegisteredUsersRequest, opts ...grpc.CallOption) (Mailbox_RegisteredUsersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Mailbox_serviceDesc.Streams[1], c.cc, "/mailbox.Mailbox/RegisteredUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &mailboxRegisteredUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mailbox_RegisteredUsersClient interface {
	Recv() (*RegisteredUsersResponse, error)
	grpc.ClientStream
}

type mailboxRegisteredUsersClient struct {
	grpc.ClientStream
}

func (x *mailboxRegisteredUsersClient) Recv() (*RegisteredUsersResponse, error) {
	m := new(RegisteredUsersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mailboxClient) DeliverMails(ctx context.Context, opts ...grpc.CallOption) (Mailbox_DeliverMailsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Mailbox_serviceDesc.Streams[2], c.cc, "/mailbox.Mailbox/DeliverMails", opts...)
	if err != nil {
		return nil, err
	}
	x := &mailboxDeliverMailsClient{stream}
	return x, nil
}

type Mailbox_DeliverMailsClient interface {
	Send(*DeliverMailsRequest) error
	CloseAndRecv() (*DeliverMailsResponse, error)
	grpc.ClientStream
}

type mailboxDeliverMailsClient struct {
	grpc.ClientStream
}

func (x *mailboxDeliverMailsClient) Send(m *DeliverMailsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mailboxDeliverMailsClient) CloseAndRecv() (*DeliverMailsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DeliverMailsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mailboxClient) GetMails(ctx context.Context, opts ...grpc.CallOption) (Mailbox_GetMailsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Mailbox_serviceDesc.Streams[3], c.cc, "/mailbox.Mailbox/GetMails", opts...)
	if err != nil {
		return nil, err
	}
	x := &mailboxGetMailsClient{stream}
	return x, nil
}

type Mailbox_GetMailsClient interface {
	Send(*GetMailsRequest) error
	Recv() (*GetMailsResponse, error)
	grpc.ClientStream
}

type mailboxGetMailsClient struct {
	grpc.ClientStream
}

func (x *mailboxGetMailsClient) Send(m *GetMailsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mailboxGetMailsClient) Recv() (*GetMailsResponse, error) {
	m := new(GetMailsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Mailbox service

type MailboxServer interface {
	NewRound(context.Context, *NewRoundRequest) (*NewRoundResponse, error)
	EndRound(context.Context, *EndRoundRequest) (*EndRoundResponse, error)
	RegisterUsers(Mailbox_RegisterUsersServer) error
	RegisteredUsers(*RegisteredUsersRequest, Mailbox_RegisteredUsersServer) error
	DeliverMails(Mailbox_DeliverMailsServer) error
	GetMails(Mailbox_GetMailsServer) error
}

func RegisterMailboxServer(s *grpc.Server, srv MailboxServer) {
	s.RegisterService(&_Mailbox_serviceDesc, srv)
}

func _Mailbox_NewRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailboxServer).NewRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mailbox.Mailbox/NewRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailboxServer).NewRound(ctx, req.(*NewRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailbox_EndRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailboxServer).EndRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mailbox.Mailbox/EndRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailboxServer).EndRound(ctx, req.(*EndRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mailbox_RegisterUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MailboxServer).RegisterUsers(&mailboxRegisterUsersServer{stream})
}

type Mailbox_RegisterUsersServer interface {
	SendAndClose(*RegisterUsersResponse) error
	Recv() (*RegisterUsersRequest, error)
	grpc.ServerStream
}

type mailboxRegisterUsersServer struct {
	grpc.ServerStream
}

func (x *mailboxRegisterUsersServer) SendAndClose(m *RegisterUsersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mailboxRegisterUsersServer) Recv() (*RegisterUsersRequest, error) {
	m := new(RegisterUsersRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Mailbox_RegisteredUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisteredUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MailboxServer).RegisteredUsers(m, &mailboxRegisteredUsersServer{stream})
}

type Mailbox_RegisteredUsersServer interface {
	Send(*RegisteredUsersResponse) error
	grpc.ServerStream
}

type mailboxRegisteredUsersServer struct {
	grpc.ServerStream
}

func (x *mailboxRegisteredUsersServer) Send(m *RegisteredUsersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Mailbox_DeliverMails_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MailboxServer).DeliverMails(&mailboxDeliverMailsServer{stream})
}

type Mailbox_DeliverMailsServer interface {
	SendAndClose(*DeliverMailsResponse) error
	Recv() (*DeliverMailsRequest, error)
	grpc.ServerStream
}

type mailboxDeliverMailsServer struct {
	grpc.ServerStream
}

func (x *mailboxDeliverMailsServer) SendAndClose(m *DeliverMailsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mailboxDeliverMailsServer) Recv() (*DeliverMailsRequest, error) {
	m := new(DeliverMailsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Mailbox_GetMails_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MailboxServer).GetMails(&mailboxGetMailsServer{stream})
}

type Mailbox_GetMailsServer interface {
	Send(*GetMailsResponse) error
	Recv() (*GetMailsRequest, error)
	grpc.ServerStream
}

type mailboxGetMailsServer struct {
	grpc.ServerStream
}

func (x *mailboxGetMailsServer) Send(m *GetMailsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mailboxGetMailsServer) Recv() (*GetMailsRequest, error) {
	m := new(GetMailsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Mailbox_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mailbox.Mailbox",
	HandlerType: (*MailboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewRound",
			Handler:    _Mailbox_NewRound_Handler,
		},
		{
			MethodName: "EndRound",
			Handler:    _Mailbox_EndRound_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterUsers",
			Handler:       _Mailbox_RegisterUsers_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RegisteredUsers",
			Handler:       _Mailbox_RegisteredUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeliverMails",
			Handler:       _Mailbox_DeliverMails_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetMails",
			Handler:       _Mailbox_GetMails_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mailbox.proto",
}

func (m *NewRoundRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewRoundRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Round != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Round))
		i += 8
	}
	return i, nil
}

func (m *NewRoundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewRoundResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *EndRoundRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndRoundRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Round != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Round))
		i += 8
	}
	return i, nil
}

func (m *EndRoundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndRoundResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RegisterUsersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterUsersRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Round != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Round))
		i += 8
	}
	if len(m.UserKeys) > 0 {
		for _, b := range m.UserKeys {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMailbox(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Expected) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMailbox(dAtA, i, uint64(len(m.Expected)*8))
		for _, num := range m.Expected {
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(num))
			i += 8
		}
	}
	return i, nil
}

func (m *RegisterUsersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterUsersResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RegisteredUsersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisteredUsersRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Round != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Round))
		i += 8
	}
	return i, nil
}

func (m *RegisteredUsersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisteredUsersResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserKeys) > 0 {
		for _, b := range m.UserKeys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMailbox(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *Inbox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Inbox) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMailbox(dAtA, i, uint64(len(m.UserKey)))
		i += copy(dAtA[i:], m.UserKey)
	}
	if len(m.Messages) > 0 {
		for _, b := range m.Messages {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMailbox(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *Mail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMailbox(dAtA, i, uint64(len(m.UserKey)))
		i += copy(dAtA[i:], m.UserKey)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMailbox(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *DeliverMailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeliverMailsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Round != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Round))
		i += 8
	}
	if len(m.Mails) > 0 {
		for _, msg := range m.Mails {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMailbox(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DeliverMailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeliverMailsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetMailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMailsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Round != 0 {
		dAtA[i] = 0x9
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Round))
		i += 8
	}
	if len(m.UserKeys) > 0 {
		for _, b := range m.UserKeys {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMailbox(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *GetMailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMailsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Inboxes) > 0 {
		for _, msg := range m.Inboxes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMailbox(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintMailbox(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NewRoundRequest) Size() (n int) {
	var l int
	_ = l
	if m.Round != 0 {
		n += 9
	}
	return n
}

func (m *NewRoundResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *EndRoundRequest) Size() (n int) {
	var l int
	_ = l
	if m.Round != 0 {
		n += 9
	}
	return n
}

func (m *EndRoundResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RegisterUsersRequest) Size() (n int) {
	var l int
	_ = l
	if m.Round != 0 {
		n += 9
	}
	if len(m.UserKeys) > 0 {
		for _, b := range m.UserKeys {
			l = len(b)
			n += 1 + l + sovMailbox(uint64(l))
		}
	}
	if len(m.Expected) > 0 {
		n += 1 + sovMailbox(uint64(len(m.Expected)*8)) + len(m.Expected)*8
	}
	return n
}

func (m *RegisterUsersResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RegisteredUsersRequest) Size() (n int) {
	var l int
	_ = l
	if m.Round != 0 {
		n += 9
	}
	return n
}

func (m *RegisteredUsersResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.UserKeys) > 0 {
		for _, b := range m.UserKeys {
			l = len(b)
			n += 1 + l + sovMailbox(uint64(l))
		}
	}
	return n
}

func (m *Inbox) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserKey)
	if l > 0 {
		n += 1 + l + sovMailbox(uint64(l))
	}
	if len(m.Messages) > 0 {
		for _, b := range m.Messages {
			l = len(b)
			n += 1 + l + sovMailbox(uint64(l))
		}
	}
	return n
}

func (m *Mail) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserKey)
	if l > 0 {
		n += 1 + l + sovMailbox(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMailbox(uint64(l))
	}
	return n
}

func (m *DeliverMailsRequest) Size() (n int) {
	var l int
	_ = l
	if m.Round != 0 {
		n += 9
	}
	if len(m.Mails) > 0 {
		for _, e := range m.Mails {
			l = e.Size()
			n += 1 + l + sovMailbox(uint64(l))
		}
	}
	return n
}

func (m *DeliverMailsResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetMailsRequest) Size() (n int) {
	var l int
	_ = l
	if m.Round != 0 {
		n += 9
	}
	if len(m.UserKeys) > 0 {
		for _, b := range m.UserKeys {
			l = len(b)
			n += 1 + l + sovMailbox(uint64(l))
		}
	}
	return n
}

func (m *GetMailsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Inboxes) > 0 {
		for _, e := range m.Inboxes {
			l = e.Size()
			n += 1 + l + sovMailbox(uint64(l))
		}
	}
	return n
}

func sovMailbox(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMailbox(x uint64) (n int) {
	return sovMailbox(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NewRoundRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailbox
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewRoundRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewRoundRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Round = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipMailbox(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMailbox
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewRoundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailbox
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewRoundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewRoundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMailbox(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMailbox
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndRoundRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailbox
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndRoundRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndRoundRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Round = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipMailbox(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMailbox
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndRoundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailbox
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndRoundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndRoundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMailbox(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMailbox
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterUsersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailbox
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterUsersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterUsersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Round = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMailbox
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserKeys = append(m.UserKeys, make([]byte, postIndex-iNdEx))
			copy(m.UserKeys[len(m.UserKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				m.Expected = append(m.Expected, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMailbox
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMailbox
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					m.Expected = append(m.Expected, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Expected", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMailbox(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMailbox
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterUsersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailbox
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterUsersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterUsersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMailbox(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMailbox
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisteredUsersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailbox
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisteredUsersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisteredUsersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Round = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipMailbox(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMailbox
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisteredUsersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailbox
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisteredUsersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisteredUsersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMailbox
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserKeys = append(m.UserKeys, make([]byte, postIndex-iNdEx))
			copy(m.UserKeys[len(m.UserKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMailbox(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMailbox
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Inbox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailbox
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inbox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inbox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMailbox
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserKey = append(m.UserKey[:0], dAtA[iNdEx:postIndex]...)
			if m.UserKey == nil {
				m.UserKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMailbox
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, make([]byte, postIndex-iNdEx))
			copy(m.Messages[len(m.Messages)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMailbox(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMailbox
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailbox
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMailbox
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserKey = append(m.UserKey[:0], dAtA[iNdEx:postIndex]...)
			if m.UserKey == nil {
				m.UserKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMailbox
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMailbox(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMailbox
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeliverMailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailbox
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeliverMailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeliverMailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Round = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMailbox
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mails = append(m.Mails, &Mail{})
			if err := m.Mails[len(m.Mails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMailbox(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMailbox
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeliverMailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailbox
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeliverMailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeliverMailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMailbox(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMailbox
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailbox
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Round = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMailbox
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserKeys = append(m.UserKeys, make([]byte, postIndex-iNdEx))
			copy(m.UserKeys[len(m.UserKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMailbox(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMailbox
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailbox
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inboxes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMailbox
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inboxes = append(m.Inboxes, &Inbox{})
			if err := m.Inboxes[len(m.Inboxes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMailbox(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMailbox
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMailbox(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMailbox
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMailbox
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMailbox
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMailbox
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMailbox(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMailbox = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMailbox   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mailbox.proto", fileDescriptorMailbox) }

var fileDescriptorMailbox = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4d, 0x8b, 0xd3, 0x40,
	0x18, 0xee, 0x6c, 0x6c, 0x13, 0xdf, 0x6d, 0x6d, 0x19, 0xeb, 0x6e, 0x36, 0xba, 0x31, 0x8c, 0x07,
	0x73, 0x2a, 0x4b, 0x05, 0x2f, 0x8a, 0xa0, 0xec, 0x22, 0x22, 0xab, 0x32, 0x20, 0x78, 0x93, 0xd6,
	0xbc, 0x2c, 0xc1, 0x36, 0xa9, 0x99, 0x54, 0xdb, 0x7f, 0xe2, 0x4f, 0xf2, 0xe8, 0xc5, 0xbb, 0xd4,
	0x3f, 0x22, 0xd3, 0xcc, 0xa4, 0x49, 0xfa, 0x79, 0x7c, 0xf3, 0x7c, 0xcc, 0x3b, 0xcf, 0x3c, 0x04,
	0x5a, 0xe3, 0x41, 0x38, 0x1a, 0xc6, 0xb3, 0xde, 0x24, 0x89, 0xd3, 0x98, 0x9a, 0x6a, 0x64, 0x8f,
	0xa1, 0xfd, 0x0e, 0x7f, 0xf0, 0x78, 0x1a, 0x05, 0x1c, 0xbf, 0x4d, 0x51, 0xa4, 0xb4, 0x0b, 0xf5,
	0x44, 0xce, 0x36, 0xf1, 0x88, 0xdf, 0xe0, 0xd9, 0xc0, 0x28, 0x74, 0x56, 0x44, 0x31, 0x89, 0x23,
	0x81, 0x52, 0x7c, 0x15, 0x05, 0x87, 0x89, 0x57, 0x44, 0x25, 0x46, 0xe8, 0x72, 0xbc, 0x09, 0x45,
	0x8a, 0xc9, 0x47, 0x81, 0x89, 0xd8, 0xe9, 0x40, 0xef, 0xc3, 0xed, 0xa9, 0xc0, 0xe4, 0xf3, 0x57,
	0x9c, 0x0b, 0xfb, 0xc8, 0x33, 0xfc, 0x26, 0xb7, 0xe4, 0x87, 0xb7, 0x38, 0x17, 0xd4, 0x01, 0x0b,
	0x67, 0x13, 0xfc, 0x92, 0x62, 0x60, 0x1b, 0x9e, 0xe1, 0x37, 0x78, 0x3e, 0xb3, 0x53, 0xb8, 0x57,
	0x39, 0x46, 0x9d, 0xdf, 0x83, 0x13, 0x0d, 0x60, 0xb0, 0x7f, 0x03, 0xf6, 0x14, 0x4e, 0xd7, 0xf8,
	0x99, 0x55, 0x79, 0x39, 0x52, 0x5e, 0x8e, 0xbd, 0x80, 0xfa, 0x9b, 0x68, 0x18, 0xcf, 0xe8, 0x19,
	0x58, 0x9a, 0xb5, 0x74, 0x6e, 0x72, 0x53, 0x91, 0xe4, 0x05, 0xc6, 0x28, 0xc4, 0xe0, 0x06, 0xf3,
	0xcb, 0xe9, 0x99, 0x3d, 0x83, 0x5b, 0xd7, 0x83, 0x70, 0xb4, 0x4b, 0x6e, 0x83, 0xa9, 0xe8, 0xf6,
	0x51, 0x86, 0xa8, 0x91, 0x7d, 0x80, 0xbb, 0x97, 0x38, 0x0a, 0xbf, 0x63, 0x22, 0x3d, 0xf6, 0x64,
	0xfc, 0x08, 0xea, 0xb2, 0x16, 0xd9, 0x0a, 0xc7, 0xfd, 0x56, 0x4f, 0x77, 0x46, 0x6a, 0x79, 0x86,
	0xb1, 0x13, 0xe8, 0x96, 0x1d, 0x55, 0x9c, 0x97, 0xd0, 0x7e, 0x8d, 0xe9, 0x01, 0xa7, 0xec, 0x7a,
	0x49, 0xf6, 0x1c, 0x3a, 0x2b, 0x17, 0x95, 0xae, 0x0f, 0x66, 0x28, 0x03, 0xc4, 0x2c, 0xdb, 0xe3,
	0xfe, 0x9d, 0x7c, 0xb1, 0x65, 0xb0, 0x5c, 0xc3, 0xfd, 0x3f, 0x06, 0x98, 0xd7, 0x19, 0x44, 0x5f,
	0x82, 0xa5, 0xfb, 0x4a, 0xed, 0x5c, 0x50, 0xe9, 0xba, 0x73, 0xb6, 0x01, 0x51, 0x17, 0xaa, 0x49,
	0x0b, 0xdd, 0xda, 0x82, 0x45, 0xa5, 0xf1, 0x05, 0x8b, 0xb5, 0x8a, 0xd7, 0x28, 0x87, 0x56, 0xa9,
	0x7d, 0xf4, 0x3c, 0x67, 0x6f, 0x2a, 0xbf, 0xe3, 0x6e, 0x83, 0xb5, 0xa3, 0x4f, 0xe8, 0x27, 0x68,
	0x57, 0x8a, 0x48, 0x1f, 0xae, 0xc9, 0xca, 0x95, 0x76, 0xbc, 0xed, 0x04, 0xed, 0x7c, 0x41, 0xe8,
	0x7b, 0x68, 0x16, 0xdf, 0x96, 0x3e, 0xc8, 0x55, 0x1b, 0x4a, 0xe4, 0x9c, 0x6f, 0x41, 0x0b, 0xab,
	0x5e, 0x81, 0xa5, 0x9f, 0xb3, 0x90, 0x60, 0xa5, 0x27, 0x85, 0x04, 0xab, 0x6f, 0x2f, 0x4d, 0x2e,
	0xc8, 0xab, 0xce, 0xaf, 0x85, 0x4b, 0x7e, 0x2f, 0x5c, 0xf2, 0x77, 0xe1, 0x92, 0x9f, 0xff, 0xdc,
	0xda, 0xb0, 0xb1, 0xfc, 0x8d, 0x3d, 0xf9, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x46, 0xa6, 0x09, 0x11,
	0xd7, 0x04, 0x00, 0x00,
}
